@use "properties" as prop;
@use "default";
@use "utils";
@use "sass:color";
@use "sass:list";
@import "extends";

$color-buttons: (
        "standard": (prop.$primary-color, prop.$main-second-color),
        "warning": (prop.$warning-color, prop.$main-second-color),
);

$color-fields: (
        "standard":(prop.$primary-color, prop.$main-first-color)
);

$property-buttons: (
        "":(p-x: 3.1rem, p-y: 1.4rem, radius: 0.4rem, border: 0.1rem, font-size: 1.4rem, font-weight: 500),
        "-sm":(p-x: 1rem, p-y: 0.7rem, radius: 0.5rem, border: 0.1rem, font-size: 1.2rem, font-weight: 500),
);

$font-size-text: (
        18,
        20,
        24,
        26,
        32,
        48,
        64
);

$indents-type: (
        "p":"padding",
        "m":"margin"
);

$indents-size: (
        5,
        10,
        20,
        30
);

$spacing-type: (
        "":"",
        "l":"-left",
        "r":"-right",
        "t":"-top",
        "b":"-bottom"
);


html {
  @extend %standard-scroll-bar;

  @media screen and (-webkit-min-device-pixel-ratio: 1) {
    font-size: 10px;
  }
  @media screen and (-webkit-min-device-pixel-ratio: 2) {
    font-size: 7.5px;
  }
  @media screen and (-webkit-min-device-pixel-ratio: 3) {
    font-size: 5px;
  }
  @media screen and (-webkit-min-device-pixel-ratio: 4) {
    font-size: 2.5px;
  }

  body {
    overflow-x: hidden;
    font-family: default-font, Verdana, sans-serif;

    &.modal-open {
      overflow: hidden;
    }
  }
}

@each $title,
$colors in $color-buttons {


  @each $type,
  $property in $property-buttons {

    .btn-#{$title}#{$type} {
      @extend %btn;
      @include utils.button-size($font-size: map-get($property, "font-size"), $border-radius: map-get($property, "radius"),
      $p-x: map-get($property, "p-x"), $p-y: map-get($property, "p-y"), $font-weight: map-get($property, "font-weight"));
      background: nth($colors, 1);
      color: nth($colors, 2);
      border: map-get($property, "border") solid nth($colors, 1);

      &:not(:disabled):hover {
        background: adjust-color($color: nth($colors, 1), $red: 37, $green: 26, $blue: -2);
        border: map-get($property, "border") solid adjust-color($color: nth($colors, 1), $red: 37, $green: 26, $blue: -2);
      }

      &:disabled {
        color: adjust-color($color: nth($colors, 2), $red: -255, $green: -255, $blue: -255, $alpha: -0.74);
        background: adjust-color($color: nth($colors, 1), $red: 127, $green: 126, $blue: -1);
        border: map-get($property, "border") solid adjust-color($color: nth($colors, 1), $red: 127, $green: 126, $blue: -1);
      }
    }
  }
}

@each $title,
$colors in $color-buttons {

  .btn-#{$title}-icon {
    border-radius: 0.5rem;
    background: nth($colors, 1);
    border: 0.1rem solid nth($colors, 1);
    padding: 0.5rem;

    img {
      width: 100%;
      height: 100%;
    }

    &:not(:disabled):hover {
      transition: 0.2s;
      cursor: pointer;
      background: adjust-color(nth($colors, 1), $red: 37, $green: 26, $blue: -2);
      border: 0.1rem solid adjust-color(nth($colors, 1), $red: 37, $green: 26, $blue: -2);

      img {
        filter: prop.$icon-svg-hover-color;
      }
    }

    &:disabled {
      color: adjust-color($color: nth($colors, 2), $red: -255, $green: -255, $blue: -255, $alpha: -0.74);
      background: adjust-color($color: nth($colors, 1), $red: 127, $green: 126, $blue: -1);
      border: 0.1rem solid adjust-color($color: nth($colors, 1), $red: 127, $green: 126, $blue: -1);

      img {
        filter: prop.$icon-svg-hover-color;
      }
    }

  }
}


@each $title,
$colors in $color-fields {

  .field-#{$title} {
    @extend %field;
    border: 0.2rem solid nth($colors, 1);
    color: nth($colors, 2);

    &:not(:disabled, :focus):hover {
      border: 0.2rem solid adjust-color($color: nth($colors, 1), $red: 37, $green: 26, $blue: -2);
    }

    &:focus {
      outline: 0.2rem solid adjust-color($color: nth($colors, 1), $red: 37, $green: 26, $blue: -2);
      border: 0.2rem solid adjust-color($color: nth($colors, 1), $red: 37, $green: 26, $blue: -2);
    }

    &:disabled {
      border: 0.2rem solid adjust-color($color: nth($colors, 1), $red: 127, $green: 126, $blue: -1);
    }
  }
}

.field-area {
  resize: none;
  @extend %standard-scroll-bar;
}

.field-fail {
  font-size: 1.2rem;
  @include utils.fontStyle(prop.$warning-color, 400);
}

.field-label {
  color: black;
  font-size: 2rem;
}

@each $size in $font-size-text {
  .fs-#{$size} {
    font-size: utils.calcFontSize($size - $size / 5, $size, 1024, 1920);
  }
}


@each $name, $type in $indents-type {

  @each $size in $indents-size {
    @each $title, $spacing in $spacing-type {
      .#{$name}#{$title}-#{$size} {
        #{$type}#{$spacing}: #{$size/10}rem;
      }
    }
  }
}
